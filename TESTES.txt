# MINISHELL REDIRECTION TESTS
# Run these tests manually in your minishell to verify >, <, and >> functionality

## BASIC OUTPUT REDIRECTION (>)

# Test 1: Basic echo redirect
echo "hello world" > output.txt
cat output.txt
(WORKS)

# Test 2: Overwrite existing file
echo "first content" > test.txt
echo "second content" > test.txt
cat test.txt
(WORKS)

# Test 3: Redirect command output
pwd > current_dir.txt
cat current_dir.txt
(WORKS)

# Test 4: Redirect with built-ins
env > environment.txt
head -5 environment.txt
(NEED TO CHECK AGAIN BECAUSE WE HAVE DEBUGGING MESSAGES IN OUTPUT, SO I THINK IT MESSES head CMD)

## APPEND REDIRECTION (>>)

# Test 5: Basic append
echo "line 1" > append_test.txt
echo "line 2" >> append_test.txt
echo "line 3" >> append_test.txt
cat append_test.txt
(WORKS)

# Test 6: Append to new file
echo "first line in new file" >> new_append.txt
cat new_append.txt
(WORKS)

# Test 7: Multiple appends
echo "a" >> multi.txt
echo "b" >> multi.txt
echo "c" >> multi.txt
cat multi.txt
(WORKS

## INPUT REDIRECTION (<)

# Test 8: Basic input redirection
echo "test input content" > input_file.txt
cat < input_file.txt
(WORKS)

# Test 9: Input with other commands
echo "hello" > greeting.txt
cat < greeting.txt > copy.txt
cat copy.txt
(WORKS)

# Test 10: Input redirection with wc
echo -e "line1\nline2\nline3" > lines.txt
wc -l < lines.txt
(DOESN'T WORK TO WELL BECAUSE OF THE BACKSLASH, BUT REDIRECTION WORKS NICELY)

## ERROR CASES TO TEST

# Test 11: Permission errors (if applicable)
echo "test" > /root/noperm.txt
(SHOULD WORK NOW)

# Test 12: Input from non-existent file
cat < nonexistent.txt
(WORKS)

# Test 13: Directory as output
echo "test" > /tmp

## ADVANCED TESTS

# Test 14: Empty output
echo > empty.txt
cat empty.txt

# Test 15: Multiple redirections (last one should win)
echo "final" > test1.txt > test2.txt
cat test1.txt
cat test2.txt

# Test 16: Built-in commands with redirections
export TEST_VAR="hello"
echo $TEST_VAR > var_test.txt
cat var_test.txt

# Test 17: Commands with arguments
echo -n "no newline" > nonl.txt
cat nonl.txt

# Test 18: Long content
echo "This is a longer line with multiple words and spaces" > long.txt
cat long.txt

## MULTIPLE REDIRECTION TESTS

# Test 19: Input and output redirection combined
echo "combined test" > combined_input.txt
cat < combined_input.txt > combined_output.txt
cat combined_output.txt

# Test 20: Multiple output redirections (last wins)
echo "first" > multi1.txt > multi2.txt > multi3.txt
cat multi1.txt
cat multi2.txt  
cat multi3.txt

# Test 21: Multiple append redirections
echo "start" > multiappend.txt
echo "middle" >> multiappend.txt >> multiappend2.txt
cat multiappend.txt
cat multiappend2.txt

# Test 22: Input with multiple outputs
echo "source data" > source.txt
cat < source.txt > dest1.txt > dest2.txt
cat dest1.txt
cat dest2.txt

# Test 23: Complex redirection chain
echo "step1" > step1.txt
cat < step1.txt > step2.txt
cat < step2.txt >> step1.txt
cat step1.txt

# Test 24: Mixed redirection types
echo "base content" > base.txt
echo "append1" >> base.txt
cat < base.txt > final.txt
echo "append2" >> final.txt
cat final.txt

# Test 25: Multiple commands with redirections
echo "file1 content" > file1.txt; echo "file2 content" > file2.txt
cat file1.txt file2.txt > merged.txt
cat merged.txt

# Test 26: Redirection with pipes and redirections
echo "pipe test" > pipe_source.txt
cat < pipe_source.txt | cat > pipe_dest.txt
cat pipe_dest.txt

# Test 27: Built-ins with multiple redirections
pwd > pwd1.txt > pwd2.txt
env > env1.txt >> env2.txt
cat pwd1.txt
cat pwd2.txt
head -3 env1.txt
head -3 env2.txt

## PIPE TESTS

# Test 28: Basic pipe
echo "hello world" | cat

# Test 29: Pipe with grep
echo -e "line1\nline2\ntest line\nline4" | grep "test"

# Test 30: Multiple pipes
echo "hello world" | cat | cat

# Test 31: Pipe with wc
echo -e "one\ntwo\nthree" | wc -l

# Test 32: Pipe with built-ins
env | grep "PATH"

# Test 33: Long pipe chain
echo "start" | cat | cat | cat

# Test 34: Pipe with echo and cat
echo "piped content" | cat

# Test 35: Pipe with multiple words
echo "hello beautiful world" | cat

# Test 36: Empty pipe input
echo "" | cat

# Test 37: Pipe with head/tail
echo -e "1\n2\n3\n4\n5" | head -3

# Test 38: Pipe with sort (if available)
echo -e "c\na\nb" | sort

# Test 39: Pipe with uniq (if available)
echo -e "a\na\nb\nb\nc" | uniq

# Test 40: Pipe with ls
ls | cat

## PIPES WITH REDIRECTIONS

# Test 41: Pipe output to file
echo "pipe to file" | cat > piped_output.txt
cat piped_output.txt

# Test 42: File input to pipe
echo "file content" > pipe_input.txt
cat < pipe_input.txt | cat

# Test 43: Pipe with append
echo "first" > pipe_append.txt
echo "second" | cat >> pipe_append.txt
cat pipe_append.txt

# Test 44: Complex pipe and redirection
echo "complex" > complex_input.txt
cat < complex_input.txt | cat | cat > complex_output.txt
cat complex_output.txt

# Test 45: Multiple pipes with redirection
echo "multi pipe" | cat | cat | cat > multi_pipe_output.txt
cat multi_pipe_output.txt

# Test 46: Pipe with input and output redirection
echo "both directions" > both_input.txt
cat < both_input.txt | cat > both_output.txt
cat both_output.txt

## ADVANCED PIPE TESTS

# Test 47: Pipe with built-in commands
pwd | cat

# Test 48: Pipe with echo variations
echo -n "no newline" | cat

# Test 49: Large content through pipe
echo "This is a very long line with many words that should pass through the pipe correctly" | cat

# Test 50: Pipe with special characters
echo "special chars: !@#$%^&*()" | cat

# Test 51: Multiple commands with pipes
echo "cmd1" | cat; echo "cmd2" | cat

# Test 52: Pipe error handling
nonexistent_command | cat

# Test 53: Pipe with empty command
echo "test" | 

# Test 54: Nested pipe operations
echo "nested" | cat | grep "nested"

## CLEANUP COMMANDS
# Run these to clean up test files
rm -f output.txt test.txt current_dir.txt environment.txt
rm -f append_test.txt new_append.txt multi.txt input_file.txt
rm -f greeting.txt copy.txt lines.txt empty.txt test1.txt test2.txt
rm -f var_test.txt nonl.txt long.txt
rm -f combined_input.txt combined_output.txt multi1.txt multi2.txt multi3.txt
rm -f multiappend.txt multiappend2.txt source.txt dest1.txt dest2.txt
rm -f step1.txt step2.txt base.txt final.txt file1.txt file2.txt merged.txt
rm -f pipe_source.txt pipe_dest.txt pwd1.txt pwd2.txt env1.txt env2.txt
rm -f piped_output.txt pipe_input.txt pipe_append.txt complex_input.txt complex_output.txt
## EXPECTED RESULTS
# - > should create/overwrite files with command output
# - >> should append to existing files or create new ones
# - < should read input from files
# - | should pipe output from one command to input of another
# - Multiple pipes should work in sequence
# - Pipes combined with redirections should work properly
# - Error handling should show appropriate messages for invalid operations
# - File permissions should be respected

## COMPARISON WITH BASH
# To verify your implementation, run the same commands in bash and compare results:
# bash -c "echo 'test' | cat > output.txt && cat output.txt"

TOTAL: 54 Tests covering:
✅ Output redirection (>)
✅ Append redirection (>>)
✅ Input redirection (<)
✅ Pipes (|)
✅ Combined operations (pipes + redirections)
✅ Error handling
✅ Built-in commands
✅ Edge cases (empty input, special chars, permissions)
✅ Complex scenarios (multiple operations, chaining)
